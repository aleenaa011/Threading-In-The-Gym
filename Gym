// //Gym.java
// import java.util.HashMap;
// import java.util.List;
// import java.util.Map;
// import java.util.stream.Collectors;
// import java.util.stream.IntStream;

// public class Gym {
//     private final int totalGymMembers;
//     private final Map<MachineType, Integer> availableMachines;

//     public Gym(int totalGymMembers, Map<MachineType, Integer> availableMachines) {
//         this.totalGymMembers = totalGymMembers;
//         this.availableMachines = availableMachines;
//     }

//     public void openForTheDay() {
//         List<Thread> gymMembersRoutines = IntStream.rangeClosed(1, this.totalGymMembers)
//             .mapToObj((id) -> {
//                 Member member = new Member(id);
//                 Thread t = new Thread(() -> {
//                     try {
//                         member.performRoutine();
//                     } catch (Exception e) {
//                         System.out.println(e);
//                     }
//                 });
//                 t.setName("Member-" + id);
//                 return t;
//             }).collect(Collectors.toList());

//         Thread supervisor = createSupervisor(gymMembersRoutines);
//         gymMembersRoutines.forEach(Thread::start);
//         supervisor.start();
//     }

//     private Thread createSupervisor(List<Thread> threads) {
//         Thread supervisor = new Thread(() -> {
//             while (true) {
//                 List<String> runningThreads = threads.stream()
//                     .filter(Thread::isAlive)
//                     .map(Thread::getName)
//                     .collect(Collectors.toList());

//                 System.out.println(Thread.currentThread().getName() + " - " +
//                     runningThreads.size() + " members currently exercising: " + runningThreads + "\n");

//                 if (runningThreads.isEmpty()) {
//                     break;
//                 }

//                 try {
//                     Thread.sleep(1000);
//                 } catch (InterruptedException e) {
//                     System.out.println(e);
//                 }
//             }
//             System.out.println(Thread.currentThread().getName() + " all threads completed");
//         });
//         supervisor.setName("Gym Staff");
//         return supervisor;
//     }

//     public static void main(String[] args) {
//         Gym sobesGym = new Gym(5, new HashMap<>() {{
//             put(MachineType.LEGPRESSMACHINE, 5);
//             put(MachineType.BARBELL, 5);
//             put(MachineType.SQUATMACHINE, 5);
//             put(MachineType.LEGEXTENSIONMACHINE, 5);
//             put(MachineType.LEGCURLMACHINE, 5);
//             put(MachineType.LATPULLDOWNMACHINE, 5);
//             put(MachineType.CABLECROSSOVERMACHINE, 5);
//         }});
//         sobesGym.openForTheDay();
//     }
// }
// //Exercise.java
// import java.util.Random;

// public class Exercise {
//     private static final Random rand = new Random();
//     private final int duration;
//     private final MachineType machineType;

//     public Exercise() {
//         this.duration = rand.nextInt(3000) + 1000; // 1-4 seconds
//         this.machineType = MachineType.values()[rand.nextInt(MachineType.values().length)];
//     }

//     public int getDuration() {
//         return duration;
//     }

//     public MachineType getMachineType() {
//         return machineType;
//     }

//     @Override
//     public String toString() {
//         return machineType + " for " + duration + "ms";
//     }
// }
// //MachineType.java
// import java.util.Random;

// // Enum of all gym equipment
// public enum MachineType {
//     LEGPRESSMACHINE("Leg Press"), BARBELL("Bar Bells"), SQUATMACHINE("Squat Machine"), LEGEXTENSIONMACHINE("Leg Extensions"),
//     LEGCURLMACHINE("Leg Curls"), LATPULLDOWNMACHINE("Lat Pull Downs"), PECDECKMACHINE("Pec Deck Machine"),
//     CABLECROSSOVERMACHINE("Cable Crossovers");

//     public final String machineName;

//     MachineType(String machineName) {
//         this.machineName = machineName;
//     }

//     // Returns a random piece of gym equipment
//     public static MachineType getRandomEquipment() {
//         return MachineType.values()[new Random().nextInt(MachineType.values().length)];
//     }
// }
// //Member.java
// import java.util.List;
// import java.util.stream.Collectors;
// import java.util.stream.IntStream;

// public class Member {
//     private final int id;

//     public Member(int id) {
//         this.id = id;
//     }

//     public int getId() {
//         return this.id;
//     }

//     public List<Exercise> generateRoutine() {
//         return IntStream.range(0, 6).mapToObj(_i -> new Exercise()).collect(Collectors.toList());
//     }

//     public void performRoutine() throws InterruptedException {
//         List<Exercise> routine = generateRoutine();

//         routine.forEach(exercise -> {
//             System.out.println("Gym Member " + this.getId() + " performing exercise: " + exercise);
//             try {
//                 Thread.sleep(exercise.getDuration());
//             } catch (InterruptedException e) {
//                 System.out.println(e);
//             }
//         });
//     }
// }
// //Weight.java
// import java.util.HashMap;
// import java.util.Map;
// import java.util.Random;

// // Enum to account for the size and number all the weights in the gym.
// public enum Weight {
//     SMALL_5LBS, MEDIUM_10LBS, LARGE_25LBS;

//     static final Map<Weight, Integer> numOfWeightsInGym = new HashMap<>();

//     static {
//         numOfWeightsInGym.put(SMALL_5LBS, 110);
//         numOfWeightsInGym.put(MEDIUM_10LBS, 90);
//         numOfWeightsInGym.put(LARGE_25LBS, 75);
//     }

//     // Returns a random weight size
//     public static Weight getRandomWeight() {
//         return Weight.values()[new Random().nextInt(Weight.values().length)];
//     }
// }
